3월 18일(월)
늦으면 3층 먼저 가서 출석체크 식사시간 : 1시~2시
컴퓨터 비밀번호 : IT(한글) / 조재영강사
10시~11시
JAVA virtual machine가상화 머신 약어JVM : os관계없이 java를 구동가능하게 만듬
 write once, run everywhere 자바의 캐치프라이즈 (현실적으론 write once, test everywhere 라는 비아냥)
개발시점 : 1977년  제임스고슬링James Gosling과 팀원들이 java섬커피에 영감을 받아 이름지음
가장많이쓰이는 프로그래밍언어순위 java~c~c++~파에썬~c#~비쥬얼베이직(17,18년기준)
객체지향개념 알아보기 -> 프로그래밍언어의 역사 
 1) 1세대 펀치뚫기 
 2) 2세대 기능지향적(각 기능 위주로 만드는) 프로그래밍언어 개발C. . .다양한 기능이 필요해지자 단점 부각
 3) 3세대 객체지향 프로그래밍 틀을 미리 만들어놓고? C++(원시적인 객체지향언어)->자바와 C#(객체지향언어)->Python (더 단순하게)
객체 : 속성값을 관리->field / 기능을 관리->method
 *framework 란? 뼈대만들기, 프로그래밍 기초기능을 미리 제공하는 tool, java기반으로 만들어짐
 java 공부 후 C언어 공부하면 도움이됨, C#기반 엔진-> 유니티, C언어 개발사=마이크로소프트, 윈도우 친화적 (기타OS에 불편)

java설치 시 www.oracle.com : JDK(JAVA Developement Kit)자바라이브러리(기본기능제시)도 함께설치됨, JRE(JAVA Runtime Environment)->자바프로그램 실행용
JDK버전이 2개.. 11.0.2 와 1.8
회사의 방침상 11.0.2는 유료 그러나 회사의 기술적지원 가능 MYSQL라는 개발툴도 있음, 오라클사에 비해 A/S가 안좋음 

시작-CMD (명령프롬프트 실행)->JAVAC 입력, 아무것도 안뜨면 
내컴퓨터->우클릭 설정->고급->환경변수->시스템변수 새로만들기->변수이름 JAVA_HOME, 변수값 자바설치폴더 경로 붙여넣기
->시스템 변수중에 PATH 편집 -> PATH 텍스트편집, 변수값 맨 뒷부분에 ;%JAVA_HOME%\bin, (자바홈폴더안에 bin에 들어가라는의미) 추가 ->이후 다 확인클릭
*프롬프트 명령어 : cd.. 상위디렉터리로 이동

11시~12시
eclipse(통합개발환경)
eclipse 설치 : www.eclipse.org 다운로드 페이지, 바로 다운로드하지말고 select another mirror->show all 해서 한국지역 다른서버 이용
설치완료후 workplace=저장공간 설정 
eclipse 이전의 프로그래밍, 메모장이나 기타 워드프로그램 이용하여 확장자 java로 바꾸어 사용 (자바의정석2장참조) 단점 : 컴파일하기전까지 실수를 잡아낼수 없고 작성에 시간소요
실행 후 웰컴페이지 종료, 패키지 익스플로러에서 우클릭 후 새로만들기(java), 이름설정, 하위폴더에서 src 우클릭, new->class 만들기.
#상세내용 이클립스 19.3.18-1,2 참조
*main method : 이 안에있는 내용을 실행하게 됨 *console : 출력결과 나오는 창
*public static void main(String[]) 암기
*src = source folder	*eclipse font 바꾸기 : window->preferences ->font 입력후 조정	*괄호는 열자마자 닫는 습관이 필요
*서버관련된 자바프로그램 개발시 rinux(도스기반)로 하는경우가 많았음. 현재는 tomcat(윈도우전용),이클립스등 활용해서 윈도우환경에서도 개발가능
*eclipse 상 빨간느낌표,물결 : error / 노란느낌표,물결 : warning  *bug : 내가 원하는 값이 안 나오는 경우

12시~1시
변수란? 
 1)기본형 - byte, short, int, long, float, double, char, boolean
	1. Byte > 8비트 (-2의 7승 ~ 2의7승-1) 의 정수 ex) -1,0,1
	2. Short > 16비트 (-2의15승~2의15승-1) 의 정수 
	3. Int > 32비트 (-2의31승~2의31승-1)의 정수
	4. Long > 64비트 (-2의63승~2의63승-1)의 정수
	5. Float > 적은자릿수의 실수
	6. Double > 큰 자릿수의 실수
	7. Char > 글자 한가지 ex) 'a','b'
	8. boolean > 참 / 거짓 ex) True, False <--논리변수
*뒤에 -1이 달리는 이유? : 0이 포함되기 때문	*8비트인데 2의7승,16비트이면 2의 15승인 이유? : 첫자리는 0이면 양수, 1이면 음수로 따지기 때문
*왠만하면 int로, 모자라다싶으면 Long으로 *실수인 경우 float, 아주 정밀한 값을 요구할 경우 Double *char는 캐릭터의 약자임
 2)참조형 - 클래스형, 인터페이스형, 배열형
	1. Class, 배열
		가. 클래스의 예 : String (문자열)
		나. 배열의 예 : int [] (같은 데이터 타입을 쭉 나열하는것) *1부터가 아니라 0이 출발값임, 0부터 세기
*참조형은 기본형과 달리 초기화를 해 줘야 메모리가 확보됨 new를 통해 예시) int myNum=0 (자료값확정), String myStr="hi", (0x00ff 같은 위치로 표시)
*변수의 경우 선언만할 수 도 있지만, 사용하려면 정의가 필요
#입력예시 19.3.18-3 참조

2시~3시
연산자란? 산술, 증감, 비교, 비트, 논리
 1) 산술연산자 = +,-,*,/,%(나머지,ex- 4%3->1)
 2) 증감연산자 = ++, --
	++는 1씩 증가, --는 1씩 감소 위치에따라 실행순서가 달라짐! 전위에있으면 계산후 프린트, 후위에 있으면 프린트 후 계산
 ex) int a=5; print(++a)=6, print(a++)=6, print(a)=7
 3) 비교연산자 = >,<, >=, <=, ==, !=크다, 작다, 크거나 같다, 작거나 같다, 같다, 다르다... 결과값은 T/F 즉 boolean 형으로 나오게 된다
 4) 비트연산자 = & | ^ ~ >>, >>>, <<
	 &연산자는 비교하는 두 값의 비트 자릿수가 1일때만 1, 그 외엔 0을 준다 ex)4는 이진법으로 0100, 3은 0011 이때 4&3=0000
	|연산자(or임 쉬프트\) 비교하는 두 값의 비트 자릿수 중 하나만 1이더라도 1을 반환한다. 3|4= 0111 즉 7
	^ 연산자 비교하는 두 값의 비트 자릿수가 다를때만 1을 반환한다. 
	~연산자 비트값을 반전시킨다 ex) ~6= 0110을 1001로, = 9 
	<<연산자 비트값을 왼쪽으로 ex) <<6= 0110이 1100(뒤에 0을하나 더붙이고 앞자리는 뺌) = 10
	>>연산자 비트값을 오른쪽으로 ex) >>6= 0110 이 0011로 (오른쪽으로 미룬건 지워내고 새로생긴 첫자릿수는 맨 앞 비트를 따라간다)
	>>>연산자 비트값을 오른쪽으로 보내고 빈 자리는 0으로
*<<<가 없는 이유, 첫자리는 0이면 양, 1이면 음을 표시하기때문
 5) 논리연산자 = && ||(and, or, T/F) 2개의 논리값을 비교할 때 사용, &&(and) : 2개 다 참 ,||(or) : 1개라도 참일때 , !:부정(T->F, F->T로 바꿔버림)

scanner = 외부 프로그램에서 불러올때. import java.util.Scanner; 
*print = 한줄에, println = 줄을 바꿔서, printf = 줄바꿈 안됨