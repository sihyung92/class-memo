19.4.9 (화)
기본자료형이 객체였으면..싶은 순간이 있다. wrapper 클래스로 그러한 요구를 충족할 수 있다.
래퍼클래스의 종류(api index : java.lang.이하)
	각 자료형타입의 첫글자를 대문자로 바꾼 이름
 int - Integer클래스
	constructor
	 Integer(int i)혹은 Integer(String s). 이 때 s는 숫자로만 이루어져있어야한다.
	
	method
	 intValue() : Integer 의 값을 int값으로 반환. 리턴값 int 기타 longValue(),floatValue(),byteValue()등
	 compare(int a, int b) : a가 크면 1, b가 크면 -1, 같으면 0 static int로 반환
	 compareTo(다른 Integer a) : 객체가 크면 1, a가 크면 -1, 같으면 0 nonstatic int로 반환. 
	 parseInt(String s),(String s , int radix) : 정수만 있는 S를 static int 로 반환 radix를 설정하면 2진수, 8진수, 16진수의 static byte로 리턴
	 toString() : Integer 객체를 문자열로 바꿔줌 String 반환
	 toString(int i) : i를 static String으로 반환
	 valueOf(int i),(String s) : 기본 자료형을 Integer객체로 반환

 byte,short - Byte,Short클래스 
	constructor 
	 Byte(byte b),(String s) / Short(Short s),(String s) - int 값이 들어가면 에러가 나니 주의!

	method 쓸만한 메소드가 별로 없음
	 parseByte(String s),(String s , int radix) : s를 static byte로 리턴 / radix를 설정하면 2진수, 8진수, 16진수의 static byte로 리턴
 	 parseShort(String s),(String s , int radix) : s를 static Short로 리턴 / radix를 설정하면 2진수, 8진수, 16진수의 static Short로 리턴
	 대개 비슷함.

 long - Long클래스
	constructor 
	 Long(long l),(String s) short byte와 달리 int값넣어도 long타입으로 자동형변환 일어나서 에러없다
	
	method
	 parseLong(String s) : s를 long으로 리턴.. 주의 : "2000L"과 2000L은 다르다. 문자열의 L은 취급안됨

 double - Double클래스
	정수형보다 field가 많다. MAX_VALUE, MIN_VALUE, SIZE, TYPE 뿐만 아니라
	  NaN(not a number수학적오류),NEGATIVE_INFINITY,POSITIVE_INFINITY등등
	constructor
	 Double(double value),(String s)
	
	method
	 기타는 위와 동.
	isNaN(),(double d) : 내용이 not a number(잘못된 입력, 0을 0으로 나눈값이라든지 음수의 제곱근 라든지)라면 true,아니면 false. 비었을때는 nonstatic, d가 주어졌을때는 static boolean을 반환
	inInfinite(),(double d) : 내용이 무한대라면(무언가를 0으로 나눈값) true,아니면 false. 비었을때는 nonstatic, d가 주어졌을때는 static boolean을 반환 

 float - Float 클래스
	Double와 거의 유사.. 생성자만 Float(double d)가 가능하다는 것이 특이

 boolean - Boolean 클래스
	constructor
	 Boolean(boolean value),(String s) - s의 경우 대소문자 관계 없음
	
	method
	 toString(), parseBoolean(String s), valueOf(boolean b) 등

 char - Charcter
	필드 - 매우많음
	constructor
	 Character(char ch) - String 생성자 읍다~
	
	method - 매우 많음 몰라도 크게 상관없음. 알면 좋음

*오토랩핑과 언랩핑! = Integer su = 9999; 이런식으로도 객체를 생성할 수 있다!(auto wrapping)그것이 wrapper 클래스의 목적이므로.
	 int su3 = Integer su1 + Integer su2; 이런식으로도 사용할 수 있다.(unwrapping)
	 이 기능덕택에 대부분 명시적으로 기본자료형 객체를 생성하지 않아도 무리없이 적용되는것을 볼 수 있다

*반환 값이 static 이면 Integer.메소드(); 이런식으로 접근할 수 있고
 nonstatic이면 객체를 통해 su1.메소드(); 이런식으로 접근해야 한다
 