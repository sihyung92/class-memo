19.4.22(월)
입출력스트림 (io : input output)
왜 io를 스트림이라고 할까요?
 양방향으로 전해지는게 아닌 input은 input만, output은 output만 해서 스트림이라고 한다. 하지만 주체를 누구냐고 보느냐에따라 in,out이 뒤바뀐다.
java.io.File클래스 api 참조.
File은 외부 자료를 불러오는 클래스인데, 기본생성자가 없기때문에 파일패스나 url들을 넣어 객체생성 해야한다.
	주요 메소드
		exists() 존재하는가? boolean타입 리턴
		isDirectory() 디렉토리인가? 윈도우에선 그럴일이 없지만 타 운영체제에서는 파일과 디렉토리를 구분하지 못한다. boolean타입 리턴
		isFile() 파일인가? boolean 리턴
		getPath() 경로 String 리턴
		getAbsolutePath() 절대경로로 String 리턴
		getCanonicalPath() 상대경로를 제외한 절대경로로 String 리턴
		getName() 파일이름 String 리턴
		lastModified() 마지막 수정시간 milliseconds로 long 리턴
		length() 몇바이트인지 숫자만 long 리턴
		list() 하위 디렉토리 및 파일들을 String[]로 리턴
		createNewFile() File의 경로와 같은 새로운 파일 생성, 생성시 boolean true반환, 같은주소의 파일이 있다면 생성하지않고 false반환
 		mkdir()  새로운 디렉토리 생성, 나머지 위와 동
		mkdirs() 파일객체에 상위 디렉토리가 없다면 상위디렉토리까지 쫙 만들어줌, 나머지 위와 동
		getParent() 상위 디렉토리 주소
		renameTo(File other) 파일이름을 other의 이름으로 수정, 성공시 true 실패시 false반환
			*만약 파일안에 디렉토리가 아닌 파일이 존재한다면 이름을 바꿀수 없음.
			*혹은 사용중이거나.
		delete() 해당 디렉토리 혹은 파일을 삭제한다. 성공시 ture 실패시 false 반환
			*주의사항 위와동
		createTempFile(prefix,suffix) pre:파일명앞에붙음,3글자 이상 suf:확장자 / 임시파일을 만들어줌(c:\users\User\appdata\local\temp에) static File 리턴
			*,File directory 을 세번째 인자로 주면 내가 저장위치를 설정할 수 있음
		윈도우에선 안 중요한
		canRead() read권한 있는지 boolean 리턴
		canWrite() write권한 있는지 boolean 리턴 (윈도우에서 읽기전용 파일로 만들면 false 됨)
		canExecute() execute(실행)권한 있는지 boolean 리턴
		

파일패스를 인자로 사용할 때 주의사항 : \는 \\로 적어야한다.
절대경로와 상대경로
	상대경로 = .은 현재디렉토리, ..은 상위디렉토리
	절대경로 = c:\... 디렉토리 다쓰기

java.io.FileOutputStream
	주요 메소드
		write(int b) 1바이트를 써줌. 1바이트 초과값은 바이트 이하 자릿수만 남기고 사라짐 void
			한글은 2바이트인데 어떡해 ㅜ
			String msg = "가"
			byte[] by = msg.getBytes();
			해서 다 넣장
		write(byte[] by) by씩 마구쓰기
		close() 파일 닫음. 중요!
java.io.FileInputStream
	주요 메소드
		read() 1바이트씩 읽어들여서 int로 리턴. 만약 없다면 -1을 리턴 
		read(byte[] by) by씩 마구읽기
		close() 파일 닫음. 중요!

fileoutput fileinput은 1바이트 읽고 1바이트쓰고의 반복이기 때문에 느리다.
답답하면 buffer(byte[]를 만들어서)를 쓰자
주의 : 사이즈를 잘못맞추면 쓰는 과정에서 버그가 남
그땐 write(buff,int off, int len) 을 써서 해결 off부터 len까지만 쓰기
off를 0주고 len 을 read(buff)사이즈만큼 주면 됨
또 큰 사이즈의 버퍼를 주면 텍스트라면 같은 내용이겠지만 더 큰 메모리를 받고 있게됨.
사진이나 동영상이면 깨질것
그럴때도 write(buff,int off, int len)

혹은 클래스 BufferedInput/OutputStream을 이용할 수 도 있다.
둘의 차이는 손버퍼는 입력단계에서 들어가는거, 버퍼드스트림은 그냥스트림과 체이닝해서 쓰는거
그래서 내가만든 버퍼로 버퍼드스트림에 넣을수도 있다. 버퍼드스트림의 디폴트 사이즈는 8192바이트
BufferedInputStream
	생성자 (FileInputStream fis) ;
	주요메소드
		write() 버퍼만큼 쓰기
		close(); 닫기
BufferedOutputStream
	생성자 (FileOutputStream fos) ;
		read() 버퍼만큼 읽기
		flush() 버퍼에 남은값을 내보낸다. 네트워크의 좋은 연결성을 담보할수 없을때 flush로 buffer가 차기를 기다리지 않고 밀어내는 방식을 사용 할 수 있다.
			하지만 읽기/쓰기가 많아지면 성능상의 문제가 생기기 때문에 고려해서 써야한다.
		close() 닫기