19.4.25(목)

thread 쓰레드

멀티코어의 역사는 생각보다 길지 않다. 싱글코어 였던 때는 어떻게 다중의 작업을 처리했던걸까?
밀리세컨드 기준으로 작업물을 나눠서 a,b,c세개의 작업이 있다면 a조금,b조금,c조금을 반복해서 다중의 작업이 동시에 처리되는 것 처럼 보인다.
듀얼코어, 쿼드코어 등도 각각의 코어가 마찬가지 방식으로 돌아간다.

각각의 작업을 프로세스라고 부르고, 프로세스는 쓰레드라고 부르는 세부작업단위들이 일을 해서 만들어진다. 두가지 이상의 작업을 멀티 프로세스,
멀티 프로세스를 실행하는 것은 멀티태스킹이라고 부른다. 각각의 프로세스는 멀티 쓰레드를 동원할 수 있다.

그런데 작업물(프로세스)들을 돌아가면서 한다면 어떤 작업을 먼저할지, 하던 작업물을 중단하고 어디에 보관할지 등의 관리는 누가 할까?
운영체제(OS)가 하지요~ 그래서 OS따라 멀티 프로세스를 지원하기도, 안 하기도 한다.

java.lang.Thread
java.lang.Runnable
	쓰레드 사용방법 1
		Thread를 상속받기=>run오버라이딩=>start로 시작=>run메소드 자동실행
		start() 해당 쓰레드를 시작, JVM이 run을 실행시킴
		
	쓰레드 사용방법 2
		implements Runnable=>run오버라이딩(이 경우엔 필수)=>자기자신의 객체 생성 =>Thread객체 생성(인자로 자기자신의 객체 주기) => start로 시작 =>run메소드 자동실행

	Thread 생성자
		Thread(Runnable target) target의 쓰레드 객체를 생성
		Thread(Runnable target, String name) target의 쓰레드객체 name을 생성
		Thread(String name) 쓰레드객체 name을 생성
	Thread 메소드
		getName() ; 해당 쓰레드의 이름
		currentThread() 현재 쓰레드. static Thread 반환
		setName()  해당 쓰레드의 이름 설정
		sleep(long millis) 시간만큼 대기한다 대기시간이 끝난다는 것이 직후 실행되는 것을 담보하는 것은 아니다. 대기상태의 쓰레드가 여러개 있다면 실행순서가 밀릴수도 있다.
				sleep시간을 짧게 줘서 너한번 나한번 규칙있게 돌아가게 할 수도 있다.
		getPriority() 쓰레드의 우선순위를 반환한다. int 반환
		setPriority() 쓰레드의 우선순위를 지정한다. priority 의 범위는 1~10이다. default는 5이다.
		join() 현재스레드는 join()메서드를 호출한 스레드가 종료할 때 까지 기다린다
		yield() 수행중인 스레드 중 우선순위가 다른 스레드에게 제어권을 넘긴다 static void

*이미 종료된 쓰레드를 두번 실행시킬 수 없다. start()를 두번 달아놓으면 에러
*토막 상식 = 리눅스는 누가 만들었을까요~~ 리누스 토르발스Linus Benedict Torvalds
서버관리용 OS인 유닉스Unix를 기반으로 해서 가정용 컴퓨터에서도 사용 가능하게 보급된 OS입니다.

ui이어서~
