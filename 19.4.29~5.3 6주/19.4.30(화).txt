19.4.30(화)

Thread 쓰레드
	java.lang.Thread
		멀티쓰레드를 사용 할 때 수행순서가 왔다갔다 하는 과정중에 임계영역(critical section)에서 겹치는 경우가 생기면 원하지 않는 값을 얻게된다.
		그런 경우를 막기 위해 하나의 쓰레드가 일련의 수행과정을 마치도록 하는 것을 동기화(synchronization) 라고 한다. 동기화를 하는 방법은
		메소드의 접근제한자와 반환타입 사이에 synchronized를 붙여주거나 특정영역을 synchronized(객체의 reference){임계영역}으로 하면 된다.
		동기화 메소드 작업중에 쓰레드 제어권이 넘어간다면 다른 쓰레드는 sleep시켜버린다. 그렇기 때문에 성능상의 문제가 생기므로 동기화 영역을 최소화해주는 것이 좋다. 
	
	Thread 메소드
		yield() runnable 상태로 빠짐.
		interrupt() interrupt 에러를 나게함.

	Thread 순서 제어
		조건문을 주어 특정경우 yield를 반복하도록 해주면 되겠지
		interrupt 에러를 try catch로 받게함
		동기화를 한 후 Object클래스의 wait(),notify(),notifyAll() 활용

Thread Group 쓰레드 그룹
	java.lang.ThreadGroup
	쓰레드들을 그룹으로 묶어 그룹별로 제어할 수 있음.
	생성자
	ThreadGroup(String name) name 이름을 가진 쓰레드 그룹 생성
	ThreadGroup(ThreadGroup parent, String name) name 이름을 가진 부모 쓰레드그룹의 하위 쓰레드그룹 생성 

Demon Thread 데몬쓰레드
	작동하고 있는 다른 쓰레드가 없으면 종료되는 쓰레드이다.
	설정하는 방법은 Thread 객체에 setDaemon(true)를 통해 가능

network 통신
	인터넷 사이트들의 ip주소가 여러개인 이유? ip주소를 가지고 사이트 서버에서 정보를 받아오는 구조인데 너무 많은 트래픽이 몰리게 되면 터지니까 여러개 두고있다.
	ip주소를 적는게 아니라 영어 주소를 적어도 찾아갈 수 있는 이유? DNS(Domain Name System)덕분. ip주소와 도메인주소가 서로 변환가능하게 해주는 시스템.
	우리가 도메인 주소를 적으면 DNS서버에 도메인주소의 변환을 요청하게 되고 가장 빨리 접근할 수 있는 ip를 반환해주게 됨(한국에서 도메인 서버는 각 통신사가 관리하고있음)
	흔히 알고 있는 ip주소는 255까지가 가능한 네자리의 숫자, 0.0.0.0방식이 익숙한데 (IPv4) 이 방식은 약 42억개의 ip주소를 할당할 수 있었고 지금은 포화 상태이다.
	추가로 ip주소를 할당하기 위해 IPv6 프로토콜이 개발되었다. 16비트를 16진수방식으로 8자리까지의 숫자를 배정한다.

	포트란? https://newsstand.naver.com/?list=ct1&pcode=368
	HTTP란? https://ko.wikipedia.org/wiki/HTTP
	HTTPS란? https://ko.wikipedia.org/wiki/HTTPS

	java.net.InetAddress 클래스
		생성자가 default이므로 객체생성하려면 메소드를 활용해야함
			getAllByName(String host) host에 해당하는 InetAddress 배열 반환
			getByName(String host) host에 해당하는 InetAddress 객체 반환
			getLocalHost() 로컬host의 InetAddress 객체 반환
			getByAddress(byte[] addr) addr에 해당하는 InetAddress객체 반환. addr은 각 ip주소를 네개의 바이트 배열로 만들면 된다.
		주요 메소드
			getAddress() 실제ip주소를 바이트 배열로 리턴
			getHostAddress() ip주소를 문자열로 반환
			getHostName() 호스트 이름을 문자열로 반환
			toString() 호스트 이름 /ip주소 형식의 문자열로 반환

	java.net.URL 클래스
		url의 구성요소
			http://   www.sist.co.kr   :80        /       	 member.jsp?  name=sung# content
			프로토콜  호스트	   http포트(생략하면 80) path	      query 	 reference

	java.net.URLConnect	-java25 com.bit.net Ex03 참조

	소켓은 종이컵전화기 같은거라고 생각하자.. 
	java.net.ServerSocket
		accept() 받아들인 소켓

	java.net.Socket
		getOutputStream() 소켓의 아웃풋스트림을 얻어오는 메소드


*학원 통신이 유동IP이기 때문에 소켓통신 작업중에 ip주소가 변할 가능성을 염두에 두자
*내 ip주소를 알아보려면 =>cmd - ipconfig . . . 자기자신의 ip는 127.0.0.1, localhost를 써도 된다.