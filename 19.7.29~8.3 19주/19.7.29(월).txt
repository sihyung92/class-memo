19.7.29(월)
(참고교재 : 토비의 스프링)
applicationContext.xml 생성
읽어들일 때는 
org.springframework.context.support.ClassPathXmlApplicationContext(파일이름) 클래스
org.springframework.context.support.FileSystemXmlApplicationContext(패스+파일이름) 클래스
둘의 특징을 합쳐놓은 GenericXmlApplicationContext(패스+파일이름 or classPath) 클래스
 --패스+파일이름으로 할 시 xml파일의 위치는 실행위치 기준으로 패스를 넣어주어야 한다. 클래스경로로 넣을 시 classpath:/~; 스타일로 넣어주어야 한다

둘다 ApplicationContext 클래스를 상속받고 있음
bean 하위 태그
	<property> name값 필드에 value값을 넣어준다.
	<constructor-arg> value값을 생성자 인자 에 넣어줄 수 있다. (해당타입을 인자로 받는 생성자가 있어야 겠지)

제어의 역전 IoC(invert of controll) : 제어를 각 클래스에서 하는게 아니라 컨테이너에서 할 수 있도록 하는 방식.
의존성 주입 DI (Dependency Injection vb ): 소스코드 내부가 아닌 외부의 설정파일을 통해 소스를 관리 할 수 있게하는 방식.

-----스프링 xml파일 자료구조 주입--
배열			list			set			map				property
<property name="">	<property name="">	<property name="">	<property name="">		<property name="">
<array>			<list>			<set>			<map>				<props>
<value></value>		<value></value>		<value></value>		<entry key="" value=""></entry>	<prop key="">value</prop>
<value></value>		<value></value>		<value></value>		<entry key="" value=""></entry>	<prop key="">value</prop>
</array>		</list>			</set>			</map				</props>
</property>		</property>		</property>		</property>			</property>

오늘 사용한 dataSource 클래스 org.springframework.jdbc.datasource.DriverManagerDataSource
dataSource의 property 로 loginTimeout 세션 유지시간 을 설정할 수 있다. 디폴트는 무한대(0)

Junit testcase 생성하기
 test 폴더에 대놓고 생성하던지, 테스트가 필요한 클래스에 우클릭 => new => junit test case 를 생성. next를 눌러 포함하고 싶은 메소드들을 지정할 수 있다.

Junit testcase클래스에 @FixMethodOrder(MethodSorters.NAME_ASCENDING)
를 주고 test앞에 숫자를 주어 테스트 순서를 제어할 수 있다 ex) test1SelectAll() , test2UpdateOne()...

web.xml 설정 dispatcherServlet.xml파일의 위치를 파라미터를 주어 특정할 수 있다.
	<servlet>
		<servlet-name>day04</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/day04-servlet.xml</param-value>
		</init-param>
	</servlet>
arameterizableViewController는 viewName 을 property로 주어야 한다.

web.xml에 listener주어 applicationContext.xml 먼저 읽어오게 하기.
 리스너에 init param을 줄 수 없어서 context-param으로 contextConfigLocation을 선언해놓으면 들어간다.
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:/applicationContext.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>	

ModelAndView()클래스에 인자로 string을 주면 setViewName(String) 과 같다.
**classpath:/ 는 target의 classes폴더가 root이다. 이것이 컴파일된 클래스파일들과 함께 있는 이유는 src이하 폴더들은 메이븐이 편의상의 분류를 해놨지만 사실 같은 루트를 기반으로 하고 있기 때문이다.

필터로 encoding하기! web.xml에
	<filter>
		<filter-name>encoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
*보통은 잘 되는데 안되는 경우 forceEncoding을 true로 한다.

*js 와 html 에서 /는 ip주소바로뒤 / 이다.(context path 짤라먹는다).

스프링의 web.xml 설정 중 스프링 설정파일들 순서대로 불러오기 => https://devbox.tistory.com/entry/Spring-webxml-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95

스프링에서 Interceptor 구현 => org.springframework.web.servlet.handler.HandlerInterceptorAdapter 클래스 상속
*인터셉터가 있다면 인터셉터=>컨트롤러=>인터셉터 순서로 거치게 된다.
preHandle()메소드 : 컨트롤러 시작시점, return타입이 있는데 false라면 컨트롤러로 안보냄
postHandle()메소드 : 컨트롤러 종료시점(인터셉터 진입전), 인자로 ModelAndView를 받는데 이걸로 장난질 가능
afterCompletion()메소드 : 인터셉터 종료시점(뷰로 가기전에), 인자로 exception을 받는데 이걸로 오류시 상황 설정 가능
서블릿 디스패처에서 해당 bean을 생성해주고 핸들러맵핑 때
		<property name="interceptors">
			<array>
				<ref bean="handlerInterceptor"/>
			</array>
		</property> 로 설정해줄 수 있다. name이 interceptors인 것에 주목하면, 여러개의 인터셉터를 달 수 있다는걸 알 수 있다. (배열타입으로 받는다)
인터셉터를 거치고 싶지 않다고 한다면 다른 핸들러맵핑을 통해 피해줄 수 있다. 

스프링에서의 트랜잭션 처리
	jdbcTemplate를 이용할 때 sql문으로 때리지 말고 PreparedStatementCreator인터페이스 객체를 생성하자. 이 인터페이스는 connection을 인자로 받는 PreparedStatement(conn)을 오버라이딩해야
	하는데 해당 인자를 이용하여 autocommit을 막고 pstmt를 집적 제어하여 사용할 수 있다. 쿼리 처리는 psc를 인자로 받는 쿼리문들을 이용하자.

	하지만 이도 완벽한 방법이 아닌 것이 기본적으로 스프링은 connection pool을 이용하고 그래서 커넥션이 뚫릴때마다 다른 객체이기 때문에 위의 인터페이스에서 커넥션을 받아다가 autocommit을 풀고
	다음 sql문을 처리하려 해도 실은 둘이 다른 커넥션 객체이면 말짱 도루묵이잖아 그러면 어떻게 하느냐?

	org.springframework.jdbc.datasource.DataSourceTransactionManager 클래스를 이용하자. PlatformTransactionManager인터페이스를 상속받는 DTM는
	<bean id="platformTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	로 객체를 생성하고 Dao bean에 넣어주어서 사용하면 된다. (집적 코드를 치면 datasource객체도 필요하겠지)
	DataSourceTransactionManager를 가져왔으면 트랜잭션이 필요한 상황에서 dtm.getTransaction(TransactionDefinition def)을 통해 트랜잭션을 얻어내고, 트랜잭션 객체의 .commit(),.rollback() 메소드를 통해 구현할 수 있다.
	TransactionDefinition객체는 인터페이스 이므로 집적 구현하면 빡세고, new DefaultTransactionDefinition()을 통해 객체를 만들자.
	해당 트랜잭션 객체는 다른 커넥션 객체로 트랜잭션 관리를 해야하는 상황이더라도 스프링에서 커밋과 롤백 관리를 해준다


어플리케이션 계층 / 프레젠테이션 계층 / 서비스계층 비즈니스 / <=공부하자

익명클래스에서 사용하는 상위클래스의(익명클래스가 포함되어있는) 변수들은 final이어야 한다. jdk1.8부터는 final이 생략가능하지만 글만 그런거지 실제론 final이기 때문에 변수값이 변하면 에러가 난다.