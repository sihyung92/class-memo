19.6.18(화)
소프트웨어 개발프로세스 요구사항정의=>분석=>설계=>구현 == warterfall(폭포수)

유스케이스, 유스케이스 명세서,
요구 명세서 = IEEE-STD-830 표준 (웹의 실정에 맞게 알맞게 조정하자.
)

유스케이스 모델
	액터 actor 행위자 (시스템과 상호작용을 하는 시스템 외부의 존재, 인물이 아니라 시스템 자신도 액터가 될 수 있다 )
	유스케이스 usecase 행위자의 동작
	시스템 system 행위와 동작이 일어나는 시스템
	라인 line 행위자와 유스케이스간의 연관을 나타낸 것

	포함관계(include) 유스케이스에서 기존의 유스케이스를 재사용하는 관계 점선과 include 글씨로 표시. 화살표를 받는 쪽에 포함된다.
	확장관계(extend) 기존의 유스케이스에 진행단계를 추가하여 새로누 유스케이스를 만들어내는 관계 점선과 extend 글씨로 표시. 화살표를 받는쪽에서 할지말지 선택할 수 있다.

	일반화(Generalization) 실선+화살표로 표시. 하위의 개념들을 모아 공통된 상위개념을 가리킴. 상위의 개념이 화살표를 받는 쪽에 온다.

	유스케이스 클래스 표현법 :
		필드는 Attribute로 추가하고, +-#~(접근제한자)변수명:타입 형식으로
		메소드는 Operation으로 추가하고, +-#~메소드명(인자 타입):리턴 타입 형식으로

	Aggregation = 집약관계, 텅 빈 마름모 화살표로 전체객체에 꽂음
	Composition = 합성관계, 꽉 찬 마름모 화살표로 전체객체에 꽂음
	Associtaion = 연관관계, 실선으로 연결
	Generalization = 일반화관계, 부모클래스쪽으로 삼각형모양 화살표 꽂음
	realization = 실체화 단계, 인터페이스 쪽으로 삼각형모양 화살표 꽂음, 점선으로 표시
	Dependency = 의존관계, 약한결합으로 짧은 시간 이용하는 관계, 의존 받는 객체에 사선모양 화살표 꽂음, 점선으로 표시 
	
	상속받아와서 사용하는(웹으로 치면 서블릿클래스라면) 잘 모르는 클래스 일 때 subsystem으로 표현함.
	getter,setter는 표현하지 않고 생략함.
	https://gmlwjd9405.github.io/2018/07/04/class-diagram.html 참조

시퀀스 다이어그램
	실선으로 흐름, 숫자는 순서, 점선으로 return을 표시, 마치 사다리 게임 보는 것 같은 구조. starUml에서 모델 explorer에서 생성가능

유스케이스 명세서
	액터명, 유스케이스 개요, 이벤트흐름: 정상흐름/선택흐름 등을 명세하면 된다.

	star UML : 클래스 다이어그램 프로그램. 유료임 ㅎ 소스포지 쪽에서 오픈소스시절의 무료버전을 받을 수 있다. 