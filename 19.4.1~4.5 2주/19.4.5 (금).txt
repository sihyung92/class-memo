19.4.5(금)

class - 변수와 메소드~~
메소드내에서의 변수선언 말고, 
class A{
	int su ;  << 이런 메소드 외부에서의 변수인 상황에서
	su = 4321; << 이렇게 값을 변경하려고 하면 에러가 난다. 메소드 영역밖에서의 기능수행이기 때문에
	public void method1(){
	}
}

그리고 int su 를 초기화 없이 사용하려고 하면 error 가 날까?
객체로서의 변수는 초기화가 안 되어 있다면 컴파일 시에 초기화를 해준다. 초기화 해주는 default 값은
각 타입당 0에 해당하는 것들. (정수형 0 실수형 0.0 char \u0000 boolean false 참조변수 null..참조변수는 0x0000도
	주소가 될 수 있기 때문에)

static 타입의 변수명은 다른 클래스에 겹치는 경우가 생길 수 있기 때문에 static 공간에 저장될 때
package명.클래스명.static변수명 = 해당값; 이런식으로 저장된다.

static 변수를 사용할 때 클래스.static변수가 일반적임. 객체.static 변수 사용가능하지만
 컴퓨터에게 무리가 감. (이 변수 어딨지? 클래스내에 없는거네. 객체에서 클래스 위치 따다가 그 위치에서 찾아봐야지 
 = 불필요한 소요 발생) 변수를 static으로 꼭 선언해야 하는 경우가 아니라면 non-static으로 쓰자

class의 구성요소 1. 변수와 2.메소드 하나 더 있다고 했는데?  =>3. 생성자 
 생성자의 특징 : 이름은 클래스명과 동일(임의로 변경 불가)
		객체의 생성에 관여한다.
		호출은 객체 생성시점에 단한번 이루어진다.
		default 생성자는 생략이 가능하다.(없으면 자동생성됨. default생성자로.. 기존 생성자가 따로 있다면 자동생성되지 않음)
		ex) class Target{}라면 class Target{ public Target(){}}<==자동생성된다.
		생성자의 호출은 new와 함께 이루어져야 한다.
		생성자는 값을 전달할 수 없다(return할 수 없다). 왜냐하면 객체 생성시 객체의 주소를 전달하는 것이 생성자의 역할
		이기 때문에 주소를 return하므로 다른 것을 return할 수 없음.
 생성자 오버로드 : 인자의 유무, 인자의 종류, 인자의 갯수, 인자들의 배치에 따라 가능
 생성자 사용 : 필드값을 초기화 시키고 싶을 때.
		int su; publc class이름(int a){su=a} 요런식으로 하면 필드값을 초기화해서 줄 수 있다.

final 변수 => final 자료형 자료이름 ; 으로 선언. 상수형 변수로 만들어버림~ 절대 못바꿔 이제
		자료이름은 대문자로만 적는 것이 상례이다
		전역변수로 final int SU ;를 했을 때 생성자로 public a(){SU=2020;}식으로 하면 그 객체에서
		SU=2020상수가 되는거임~~

this. =>class A01의 메인문{A01 ME = NEW A01(); me.func01(me)} 일때 A의 메소드 func01(){func02();} func02(){}가 있다면
이걸 수행할 때 원래 a의 메소드에서 func(A01 you){you.func02();}여야 객체 위치를 찾아가겠지.. 그런데 비워놔도 된다.
왜???? 비워논 실행문 func02();에 앞에는 this.키워드가 생략되어 있기 때문. this. 은 객체 자기자신을 지칭하는 키워드이다.

배열 array = int a1= 10,a2=11,a3=12,a4=13; 를 했다. a+1 을 호출하면.. 11이 나와버림 ㅜㅜ a의 몇번째 것 하고싶으면?
배열을 쓰세요 ^^
 자료형[] 배열명 = new 자료명[배열갯수]; <=배열의 선언  / 배열명[index]=값;<=초기화
주의 : 0부터 세기 때문에 배열갯수 보다 index가 1작음. 배열갯수 5 라면 0,1,2,3,4까지
 배열의 선언과 초기화를 한번에 하는법 ! : 자료형[] 배열명 = new 자료형[]{값,값2,값3,값4};
	더 줄이면 : 자료형[] 배열명 = {값1,값2,값3,값4};

*콘솔창에서 메인문에 String[] args 에 parameter주는 법 = java 클래스이름 parameter뛰어쓰기parmeter2뛰어쓰기...
or java 클래스이름 parameter탭parameter2탭parameter3탭... or java 클래스이름 parameter개행....
*args 는 arguments 의 약자이고 내맘대로 써도 된다