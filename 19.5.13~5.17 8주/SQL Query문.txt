query문.
	* '' = null과 같은의미
	*--가 주석임.
	*desc table; =>테이블의 칼럼들. select tname from tab; =>테이블 이름들.
	*띄어쓰기를 잘 해야한다. ;을 붙여서 끝내기 전까지 개행은 몇번이든 상관없다.
	*query문장은 대소문자는 구분하지 않는다. value값은 대소문자를 구분함.
	*field명은 앞에 <tabel명>. 이 생략되어있다.
	*dual table = 오라클에서 제공하는 더미테이블. 하나의 레코드를 가지고 있으며, 이런저런 테스트를 해볼 수 있다.
	!주의 빡종하면 다 날라감. 걱정되면 commit하세요.
함수
	단일행 함수
		숫자함수
			abs(숫자) 절대값 반환
			floor(숫자) 소숫점 아랫값 버림.
			round(숫자, 자릿수) 특정 자릿수에서 아랫값 반올림(인자로 안 주면 소숫점) 자릿수 양수는 소숫점 몇째자리인지, 음수는 정수 몇째자리인지.
			trunc(숫자, 자릿수) 특정 자릿수에서 아랫값 버림(인자로 안 주면 소숫점)
			mod(분자,분모) 분자/분모의 나머지값을 반환 ==분자%분모
			power(m,n) m의 n승을 반환 
			exp(숫자) e의 적어넣은 숫자승을 반환
			log(숫자) 숫자의 log값 반환
			cos(숫자) 코사인값 반환
			sin(숫자) 사인값 반환
		*속성값 대신 숫자를 넣으면 연산한 결과를 카디널리티만큼 출력한다.

		문자함수
			lower('문장') 소문자로
			upper('문장') 대문자로
			initcap('문장')단어의 첫글자들만 대문자로, 나머지는 소문자로
			concat('문장','문장') 문장들을 이어줌. ||와 같은 효과
			lentgh('문장') 문장의 길이를 숫자로 반환.
			lengthb('문장') 문장을 바이트화 한 후 숫자로 반환
			!주의 문자집합에 따라 한글의 바이트 수가 다름. KO16KSC5601, KO16MSWIN949는 2byte, UTF8,AL32UTF8은 3byte로 인식 => https://plakia.tistory.com/432 참고
			substr('문장',시작인덱스, 자르려는 문자 숫자) 문장을 인덱스부터 문자숫자만큼 자름, 문자 숫자를 안주면 인덱스부터 끝까지. 인덱스를 음수로 주면 뒤에서부터 시작위치를 잡는다.
			!주의 시작인덱스가 1부터 시작함,0을 넣어도 에러를 내지 않기때문에 원하지 않는 값을 얻을 수도 있다.
			substrb(위와같음) 문장을 바이트 단위로 자른다. 중간에 걸린 글자는 반환되지 않는다.
			instr('문장','찾을문장','몇번째것') 문장에서 찾을 문장의 인덱스를 반환, 세번째 인자를 주면 해당 개수만큼 세보고 반환. 없으면 0 
			instrb(위와같음) 문장을 바이트화 한 후 찾을 문장이 몇번째 바이트에 있는지 반환
			lpad('문장',글자수,'채울문장') 문장수를 글자 수 로 맞추고 빈 자리는 '채울문장'으로 채운다. 넣은 '문장'은 오른쪽으로 간다. 글자수 보다 문장이 길다면 길이 뒷부분은 삭제된다.
			rpad(위와 동일) 넣은 '문장'이 왼쪽으로 간다.
			trim('  문 장  ') 문장 앞 뒤에 있는 공백들을 잘라준다. 문장 내부의 공백은 자르지 않는다.
			replace('전체문장', '바뀔문장','바꿀문장') 바뀔 문장들을 바꿀문장들로 바꿔줌. 
			ascii('문자 한글자') 해당 문자의 아스키코드값 반환
			chr('ascii코드값') 해당 아스키코드에 해당하는 문자 반환			
		*속성값 대신 '문장'을 넣으면 해당 문자를 카디널리티만큼 출력한다. ''와 ""는 다르다. ""는 as문에서 바뀔 문자열을 입력할 공간을 말하는 것이다.
		*두개이상의 데이터를 이어서 보이고 싶으면 쉼표 대신 ||를 넣어주면 된다. ex) select ename||'의 연봉은'||sal from emp;

		조건 함수
			DECODE(column명, 조건1, 결과1, 조건2, 결과2, 조건3, 결과3, [나머지 결과]) = if문같은 함수.
			CASE [column명] WHEN 조건1 THEN 결과1 WHEN 조건2 THEN 결과2 [ELSE 나머지 결과] END = switch문 같은 함수.

		날짜 함수
			sysdate 시스템에 저장된 현재 날짜를 반환, +n을 하면 n일만큼 더한 결과를 출력한다.
			months_between(앞날짜, 뒷날짜) 앞날짜와 뒷날짜의 개월차를 반환한다. 소숫점은 일,시간
			add_months(날짜, 더할 개월수) 날짜에 입력한 개월수만큼 더해서 반환.
			next_days(날짜, '요일') 해당 날짜로부터 입력한 요일이 최초로 도래하는 날짜 반환. 요일값 도메인=> https://docs.aws.amazon.com/ko_kr/redshift/latest/dg/r_NEXT_DAY.html
			last_day(날짜) 해당 월의 마지막날 반환.
			round(날짜, 기준(year,month,day)) 날짜를 입력한 특정 기준으로 반올림한다.
			trunc(날짜, 기준(year,month,day)) 날짜를 입력한 특정 기준으로 버림한다.
		*날짜와 날짜사이의 계산도 가능하다. 일日이 1의자리로 된 숫자를 반환하다. 소수점은 시간을 나타낸다.

		NULL관련 함수
			NVL(column명, default값) 해당 column이 null이면 default값을 넣어준다.
			
			*null+다른 거는 null된다

		변환 함수
			to_date('문자열','datetime') ex) to_date('20140801','yyyymmdd')와 같이 사용. 문자를 날짜형식으로 바꿀때.
			to_char(date형, 'datetime') ex) to_char (sysdate, 'yyyy-mm-dd dy') 와 같이 사용. 날짜형식을 문자로 바꿀때.
			to_number('숫자로된 문자열') 숫자로 변경.
			to_number('숫자값', [format_mask]) 숫자값을 format에 맞춰서. format : 9-일반적인 숫자, 0-앞의 빈자리를 0으로 채움, ','-천의자리 표시함, '.'-소숫점 표시함, L-지역통화 단위
			*https://mwguru.tistory.com/27 포멧정보 알고싶을때
	그룹함수
		*그룹함수 : select sum(sal) from emp; = emp 그룹의  sal의 합을 한줄로 출력해준다.
			sum합 avg평균 count총개수 max최대 min최소 stddev표준편차 variance분산
		!그룹함수와 여타 필드값을 함께 호출할 수 없다. 그룹함수는 반드시 단일행으로 표현되어야 하기 때문.
			ex) select sum(sal), deptno from emp; <==error!

VIEW 가상의 테이블, 쿼리문을 저장하고 있는 객체 정도로 이해하면 된다. DB에 새로운 테이블을 생성하는게 아닌 시스템에 저장되는 값. 집적적인 테이블 접근을 제한하거나 복잡한 질의를 쉽게 만들 때 사용한다.
	*뷰의 개수의 제한은 없다.
	*뷰를 대상으로 한 DQL작업은 제한이 없지만 DML작업은 제한이 많다. 뷰에 DML을 수행하면 실제로는 원래 테이블이 조작되고, 그렇기 때문에 베이스테이블이 2개 이상이거나 
		기본키를 포함하지 않는 요청은 제한된다.
	생성 CREATE[||replace(같은 이름이 있으면 대체)] VIEW <view_테이블명> as [SELECT문] [WITH READ ONLY]
		*다른 계정의 db로 접근하려면 <다른계정명>.<테이블명>
		view는 단순 테이블을 복사한게 아니라 기존의 테이블이 변경되면 따라서 변경된다.
	사용 DQL문법에 맞춰 사용하면 된다.
	삭제 DROP VIEW <view_이름> [,<다른 뷰>,<다른 뷰>..];

INDEX 인덱스 데이터에 빠르게 접근할 수 있게 도와줌.
	생성 CREATE INDEX <index_name> ON <table명>
	삭제 DROP INDEX
	*PRIMARY KEY는 INDEX가 자동 부여된다.
DQL
	SELECT 테이블에서 정보를 불러오는 명령어. 
		ex)dummy 자료에서 select * from emp; 하면 사원 전체의 데이터를 불러오고 select * from dept; 하면 부서정보들을 불러오는 식이다.
		* FROM <table명> <별칭>, <table명2> <별칭2> = table 이름붙여주기 (테이블명에는 as를 못 쓴다.)
		* column 명을 *대신 넣어주면 해당 정보만 불러온다
		* column 변수명 as "바뀔 이름" 으로 변수명을 바꾸어 출력할 수 있다(이번에만 그렇게 출력하는 것이지 변수명을 바꾸는 것은 아님, 띄어쓰기없고 특수문자없는 한 단어라면 ""생략 가능,
		  불러오는 변수가 하나라면 as도 생략가능)
		* SELECT DISTINCT 변수명 = 중복자료를 제외한다, 변수가 많아지면 변수들 전부가 중복됐을 때 제외한다.
		* WHERE 조건문 을 붙여서 조건문 부여 가능 (sql에서는 비교연산자 == 를 =로 쓴다)
			java와 다른 비교연산자 : <>,^= (다르다)
		* AND 는 java의 &&와 같다.
		* OR 은 java의 ||와 같다.
		* NOT 은 java의 !와 같다.
		* BETWEEN A AND B = A와 B 사이를 나타내는 조건문.
		* in (A,B,C) A or B or C인 조건문
		* like 는 뒤에 오는 패턴을 찾는 조건문.
			패턴 % 문자가 없거나 하나 이상의 문자가 어떤 값이 와도 상관없다.
			     _ 하나의 문자가 어떤 값이 와도 상관없다.
			패턴 예시 ) where name like 'A%' = 첫글자가 a인 사람 모두, '%A' A로 끝나는 사람 모두, '%A%' A가 들어가는 사람 모두
				    where name like '__A_' = 이름이 4글자면서 세번째 글자가 A인 사람, '_A%' 두번째 글자가 A이고 그 뒤는 상관없음
		* is null 은 null이면 출력. is not null 은 반대. 
		!주의 null+100은 null이다.
		* GROUP BY column명 = from뒤에 오고 그룹함수를 사용 할 때 여러 집단의 그룹함수를 보고 싶을 때 사용. 칼럼명이 동일한 집단마다의 함수값을 출력해준다.
		* HAVING 그룹함수 조건 = GROUP BY 뒤에 붙여서 그룹함수 값의 조건을 더해주는 조건문. 반드시 GROUP절 뒤에 와야하며, 지정할 수 있는 조건은 그룹함수와 관련된 것이어야 한다.
		* order by 변수명 = 변수명 오름차순으로 정렬해서 출력(끝에 asc를 붙여줘야하지만 생략가능), 끝에 desc를 붙이면 내림차순이다. 
		!주의 order by는 가장 뒤에 와야한다.
		!변수값은 ''로 표시한다. (쿼리문과 달리 대소문자를 구분하므로 주의)
		*날짜 데이터를 조회할 때 '년/0월/0일' 규칙을 지켜주면 >=, <=를 통해 이후, 이전을 나타낼 수 있다.

		JOIN문
			비표준(ORACLE식문법)
			CROSS JOIN = 기본형식 : ~~~ FROM <table1>, <table2> ~~~; = table1,table2를 cartesian-product 해줌
			EQUI JOIN = 기본형식 : ~~~ FROM <table1>, <table2> WHERE <table1.속성>=<table2.속성> ~~~; = table1, table2를 동등조인 해줌
			NOEQUI JOIN = 기본형식 : ~~~~ FROM <table1>, <table2> WHERE <table1.속성> <조건연산자들 ex) >,<,<>...> <table2.속성> ~~~; = table1,2를 세타조인 해줌
			OUTER JOIN = 기본형식 : ~~~ FROM <table1>, <table2> WHERE <table1.속성>[(+)]=<table2.속성>[(+)] ~~~;  
				붙이는 쪽에 따라서 반대쪽에서 OUTER 조인.
			SELF JOIN  = 기본형식 : ~~~ FROM <table1> a , <table1> b WHERE <a.속성>=<b.다른속성> ~~~; table1을 셀프조인해줌

			표준(ANSI기준, DB 프로그램 관계없이 사용가능)
			CROSS JOIN = 기본형식 : ~~~FROM <table1> CROSS JOIN <table2> ~~~;
			EQUI JOIN = 기본형식 : ~~~FROM <table1> INNER JOIN <table2> ON <조건문>~~~;
					약식 : ~~~FROM <table1> INNER JOIN <table2> USING (비교column)~~~; : 동등조인만 가능.
			NATURE JOIN = 기본형식 : ~~~FROM <table1> NATURAL JOIN <table2>~~~; : 자연조인해줌 (동일칼럼명이 두개 이상 이라면 에러)
			OUTER JOIN = 기본형식 : ~~~FROM <table1> {LEFT||RIGHT||FULL} OUTER JOIN <table2> ON <조건문>~~~; left outer join이나 right outer join 해줌.
			*WHERE문에서 is null을 통해 OUTER에 해당하는 케이스들만 찾을 수 있다. (OUTER들은 키값에 null이 들어가 있을테니)

		SUB QUERY(부속 질의)
			()괄호안에 새로운 쿼리문을 넣는 것.
			query 안에는 SELECT문만 올 수 있다.
			서브쿼리를 넣을 수 있는 곳 => table자리(inline view,table subquery), column자리(scalar subquery), 조건절자리(nested||predicate subquery)
			!주의 column자리에 오는 서브쿼리는 단일행, 단일열이어야 한다.
			sub query를 이용한 테이블 복사
				CREATE TABLE <table이름> as (SELECT...);
				*값이 아닌 structure만 복사해오고 싶으면 where문으로 값이 나올수 없는 조건을 걸면 된다.
			sub query를 이용한 값 복사
				INSERT INTO <table이름> (SELECT...)
			sub query를 이용한 값 수정
				UPDATE <table이름> SET(<column1>,<column2>) = (SELECT <column1>,<column2>...) WHERE <조건문>;
				*SET뒤의 column들을 묶어줌으로써 1열1행처럼 다룰 수 있다.
	DESC 테이블이름;
		스키마 싹 긁어올 수 있음
DML
	SELECT 
	INSERT 투플을 삽입
		기본 형식 : insert into 들어갈테이블(columns) values (값1,값2,값3...columns 수만큼, 더 적으면 null값 들어감);
			ex) insert into bonus(ename, job, sal, comm) values ('user01','tester',100,0);
		* values를 적을 때 모든 column을 적을 것이라면 bonus뒤에 (columns)를 생략할 수 있지만 값이 대입되는 순서에 주의해야 한다.
		* desc 테이블; 로 도메인들을 찾아 볼 수 있다. values는 도메인에 맞춰 적어줘야 한다.
	DELETE 투플을 삭제
		기본 형식 : delete from 테이블;
		where로 조건문을 달아서 삭제하면 된다.
		!!주의 where 조건문을 안 주면 전체를 삭제해버린다. 몹시 주의 할 것

	UPDATE 투플을 수정(삭제,삽입으로 진행)
		기본 형식 : update 테이블 set column = '바꿀 내용', anotherColumn = '바꿀 내용2';
		where로 조건문을 달 수 있다.
		!!주의 where 조건문을 안 주면 전체를 수정해버린다. 몹시 주의 할 것

DDL
	CREATE 객체 생성(테이블 만듬)
		create 의 도메인으로 올 수 있는 자료형 들
			문자형 
				char(size)size만큼의 고정길이 문자. size는 최소 1, 단위 byte
				varchar2(size) 가변길이의 문자. size는 최대값을 지정해주는 것이고, 최대 4000, 단위 byte
				 * varchar1는 varchar2와 같지만 쓰지 않는다.
				long 가변길이의 문자형 데이터, 최대 2GB(잘 안씀)
			숫자형 
				number 최고 38자리(소수점,부호 제외)까지의 숫자를 저장할 수 있음
				number(w) 최고 자릿수 지정, 최대w값 38
				number(w,s) 최고 자릿수지정 및 소숫점 이하 자리 지정, s가 음수면 1의 자리부터 버리기 시작
			날짜형 
				date BC4712년 1월 1일 ~ AD4712년 12월 31일까지의 날짜
		기본형식
			CREATE TABLE 테이블이름(
				column이름 형식 [제약조건][PRIMARY KEY],
				column2이름 형식 [제약조건],
				column3이름 형식 [제약조건],
				[PRIMARY KEY (만든 column이름)],
				[FOREIGN KEY (외래키 이름)  REFERENCES 다른테이블(기본키) [ON 삭제조건]],
				[CONSTRAINT 제약조건이름] 제약조건 (column명)
			)
			*제약조건들 앞에 [constraint 제약조건이름]을 넣음으로써 제약조건에 이름을 부여할 수 있다.
			 제약조건명을 정하는 규칙(프로그래머 간에) = [테이블명]_[column명]_[제약조건유형], 제약조건 유형은 제약조건의 앞대문자를 따오는게 일반적이다.
			*PRIMARY KEY 와 FOREIGN KEY 앞에도 constraint를 달 수 있음.
			*제약조건들 : NOT NULL(null 안 돼), UNIQUE(동일한 values 금지),
				      DEFAULT 넣을값(기본값으로 넣을값 설정) 예) DEFAULT 1000 하고 insert할 때 아무값도 안넣으면 1000들어감
				      CHECK 제약조건 (제약조건에 안맞으면) 예) CHECK price >1000 이면 1000 이하 값은 안 받음.
			*PRIMARY KEY는 NOT NULL과 UNIQUE를 가지고 있겠지(개체 무결성 제약조건)
			*삭제조건들 : CASCADE(둘다삭제), SET NULL(NULL값 넣기), NO ACTION=RESTRICT(default임, 아무것도 안함)
		계정 만들기
			CREATE USER <id> identified by <비밀번호> [default tablesapce <tablespace명>]
			*tablespace를 확인하려면 select file_name, tablespace_name from dba_data_files;
			*비밀번호는 숫자만으로 이뤄질 수 없다.
			*권한부여는 ALTER문과 GRANT참조.
			*http://localhost:9090/apex/ 쉽게  하는법.

		테이블스페이스 만들기
			CREATE TABLESPACE <tablespace 이름> datafile <'C:\oraclexe\oradata\XE\class03.dbf'(경로)> size 100m (100m)
			*오라클 경로에 가보면 테이블스페이스 파일들이 만들어진걸 확인 할 수 있다.
		SEQUENCE 만들기 기본형식
			sequence 는 unique한 값을 부여하기 위해 사용한다. 주로 primary key의 인덱스를 늘리기 위해 사용. 테이블과는 독립적으로 저장되고 생성된다.
			CREATE SEQUENCE <테이블명_seq>
  			[START WITH n] 시퀀스의 시작 값을 지정한다. n을 1로 지정하면 1부터 순차적으로 시퀀스번호가 증가 한다.
  			[INCREMENT BY n] 시퀀스의 증가 값을 지정한다. n을 2로 하면 2씩 증가한다. START WITH를 1로, INCREMENT BY를 2로 설정하면 1, 3, 5, 7,.. 이렇게 시퀀스 번호가 증가한다.
			[MAXVALUE n | NOMAXVALUE] 시퀀스 최대값 / 최대값없음
    			[MINVALUE n | NOMINVALUE] 시퀀스 최소값 / 최소값없음
    			[CYCLE | NOCYCLE] 최대값 도달시 순환여부
    			[CACHE | NOCACHE] CACHE 여부, 원하는 숫자만큼 미리 만들어 Shared Pool의 Library Cache에 상주시킨다. default값 2
			!주의 한번 올라간 값을 되돌릴 방법은 없다.
			* 현재 sequence 값 체크 = select 시퀀스명.currval from dual;
			* SEQUENCE 사용 = 시퀀스명.nextval;
	ALTER 객체 구조 변경(테이블 구조 변경)
		ALTER TABLE 테이블이름 ADD column이름 형식; = 테이블에 COLUMN column이름을 추가
		ALTER TABLE 테이블이름 ADD PRIMARY KEY(column이름); = column이름을 기본키로 설정함. 괄호안에 넣어줘야함
		ALTER TABLE 테이블이름 ADD CONSTRAINT 제약조건이름 제약조건(column명) 제약조건 추가
		ALTER TABLE 테이블이름 MODIFY column이름 새로운 형식 [제약조건]; = column이름의 타입과 제약조건을 바꿔줌
		ALTER TABLE 테이블이름 DROP COLUMN column이름; = column이름 을 삭제함
		ALTER TABLE 테이블이름 DROP CONSTRAINT 제약조건이름 ; = 제약조건을 삭제함

		시퀀스 변경
		ALTER SEQUENCE <시퀀스명>
		[INCREMENT BY n]
    		[MAXVALUE n | NOMAXVALUE]
		[MINVALUE n | NOMINVALUE]
		[CYCLE | NOCYCLE]
		[CACHE | NOCACHE]
		!주의 START WITH n은 변경할 수 없다.
		
		USER 변경
		ALTER USER <계정명> quota on 10m <tablespace 명> [default tablespace <tablespace명>]

	DROP 객체 제거(테이블 제거)
		DROP TABLE <테이블명>;
		DROP SEQUENCE <시퀀스명>;
	RENAME 테이블 이름 바꿈
		RENAME 지금이름 TO 바꿀이름;

	TRUNCATE TABLE 테이블이름; 해당 테이블의 모든 row를 지운다.		
DCL
	GRANT 사용자에게 특정 권한을 준다
		GRANT CREATE SESSION TO <유저명>; 세션권한(연결권한)을 부여한다.
		GRANT CREATE TABLE TO <유저명>; 테이블 생성 권한을 부여한다.
			!주의 이것만으로 테이블을 제대로 만들 수 없다. 데이터를 저장할 tablespace에 대한 접근권한이 없기 때문.
		*롤을 통해 여러가지 권한을 한번에 주거나 제거할 수 있다. CONNECT, RESOURCE, DBA 등. 롤도 생성할 수 있다.
	REVOKE 사용자에게서 특정 권한을 제거
		REVOKE <권한> TO <ID>