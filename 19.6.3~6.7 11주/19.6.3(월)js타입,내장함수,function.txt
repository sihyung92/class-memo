19.6.2(월)
*js 길라잡이 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference

웹에서 동적처리를 가능하게 해주는 자바 스크립트.
	<script type="text/javascript">
	</script>
형식으로 사용.

주석은 //, /**/ 자바와 동일

css처럼 외부파일을 만들어 놓고 사용할 수 도 있다.
script 선언부에서 src="js파일경로" 해주면 된다.
다만 파일을 불러왔을 때 해당 스크립트태그는 바로 닫아야 한다.(사이에 띄어쓰기 한칸도 하지말자)
다른 스크립트문을 입력하고 싶다면 새로운 스크립트 태그를 열고 사용하자.

그리고 하나의 script태그는 컴파일단위이다. 그러므로 한 태그안에서 오류가 난다면 나머지 코드는 실행되지 않는다.
다른 코드에는 영향을 미치지 않는다.

자바스크립트는 모든 변수의 선언을 var(variable)로 한다.
var obj;
그리고 이 var는 모든 자료형을 다 받는다.. 문자열이고 정수고 실수고 boolean이고 null이고...
심지어 var obj;(선언)을 생략해도 됨. 두번 선언해도 됨.
그리고 js에서는 null(가리키는 값 없음)과 undefined(정의안됨)를 구분한다. 
그리고 js의 변수는 참조변수이다. 숫자 문자 전부 랩핑해버림~
문자열을 값으로 줄 때에 ''든 ""든 전부 문자열로 받아들인다. 그걸 이용하여 내용상 "를 표현해야 할 경우 ''를 쓰고, 반대의 경우는 ""를 쓰는 방법이 있다.
	물론 리터럴 문자도 쓸 수 있다(\", \')

type 구분 :
	실수나 정수를 값으로 주면 해당 var은 number type이 된다.
	'' 나 ""를 주면 String type이 된다.
	true나 false를 주면 boolean type이 된다.
	null을 주면 null type
	undefined를 주면 undefined type(브라우저마다 undefined type 이 없는 경우도)
	
	Object type은 map처럼 활용된다. obj = {'key1':'val1'} 맵처럼 쓸때의 선언방식.
	그리고 Object의 값을 불러 들일때 키를 문자열로 처리했다면 obj['key']뿐만 아니라 obj.key <==이렇게 호출할 수 도 있다.

%중요% javascript 최상위 객체 window
this는 window, object 타입이다. var선언을 안하고 바로 쓸 수 있는것은 변수명 앞에 this.가 생략되어 있기 때문이다. 
	만약 var a ; 이렇게 했다면 this{'a':undefined}를 한 것과 같은 의미가 된다. 이 window는 현재 표시되고 있는 화면을 뜻한다.
	*window는 new window()를 통해서 생성될 수 도 있다.
	*그리고 그러므로 js에서 선언되거나 활용하는 모든 변수들은 라이프사이클이 window와 함께 하게된다.
	*그렇기때문에 지역변수를 활용하려면 var을 사용하여 의미를 제한해줘야한다. var의 선언은 전역변수를 건드리지 않으려는 노력이다.
	*그럼 펑션안에서 전역변수에 접근하고프면? var떼버려~ 지역변수와 전역변수간의 우열은 지역이 앞서기 때문에 같은 이름의 변수를 활용하려면 this.써야겠징~

number type간의 연산
	연산자는 동일하다. 차이점은 실수정수 상관없이 자연스럽게 계산을 한다는 것에 있다. 
	그래서 몫을 구할 때 평소처럼 5/2때려버리면 안되고 (5-(5%2))/2 이런식으로 해야한다.
	혹은 parseInt 함수 사용~!
	number type API = https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Number

String type 처리
	java에 있는 String메소드들은 에지간하면 다 있다.
	''나 ""로 숫자를 감싸면 일단은 String type이지만, 해당 변수로 연산을 시도하면 number type으로 바꾸어 연산을 해준다.
	그리고 parseInt같은 함수에서 문자가 있어도 무시하고 숫자만 int로 만들어주는 등 편리하게 다룰 수 있다.
	숫자가 여러개면? 문자가 나오기 전 맨 앞에 숫자를 parse한다. String이 number타입으로 변환할 수 없는데 연산자로 연산을 시도하면 nan결과값이 나온다
	*주의 : 1,000 이면 1만 parse된다.

Boolean type 처리
	new Boolean(); 혹은 true,false를 값으로 넣어주면 boolean type.

배열 type(type은 object임)
	new Array()를 통해 선언하는 배열 타입은 Object type (java와 다른 점은 중괄호 대신 []를 쓴다는 게 있다.)
	자바스타일 			js스타일
	int[] arr = new int[]{A,B,C}; => var arr2 = new Array('A','B','C');
	int[] arr = {1,2,3} => var arr = [1,2,4];
	int[] arr = new Array(3); => var arr1 = new Array(3);
	결정적으로 다른 점은 하나의 배열에 어떤 타입이든 들어갈 수 있다는 것이다. null이든 undefined이든~~
	그리고 배열의 크기를 미리 선언할 필요가 없다. 동적으로 할당됨, 빈 칸들은 undefined 가 들어있음.
	arr.length=마지막 value가 들어가있는 index+1임(그 사이가 전부 undefined더라도)
	push(),pop()등 자바 List 컬렉션처럼 활용할 수 도 있음.
	특이한 메소드
	concat(Array B) 자기 배열뒤에 B 배열을 이어붙임.
	fill(value, start, end) start(default 0)부터 end(default this.length)까지 value로 채움
	reverse() 배열을 뒤집는다 (마지막인덱스가 0, 인덱스 0 이 마지막으로 가도록)
	sort() 배열을 정렬한다, (유니코드상 빠른순으로)
IF문
	java와 기본구조 동일. 조건문에 변수가 불린타입이 아니더라도 (var)을 할 수 있음.
타입의 진위(T/F)판명
	number타입이라면 0이 아닌 number가 들어있다면 참, 0이라면 거짓
	String타입이라면 ''나 ""가 아니면 참, ''나 ""면 거짓
	null이나 undefined 도 거짓
	그래서 값이 0인 변수 a와 값이 ''인 b일 때 a==b는 true가 된다.
	뭐야 그럼.. 1도 true고 2도 true니까 a==b는 true야?
	아뇨 타입이 같으면 일단 비교하고, 다른 타입이라면 T/F로 판단합니다.
	그런데 형편이 이렇다보니 가끔 원치않은 결과도 나옵니다.
	그래서 새로운 연산자 : === value비교와 type까지 비교해줍니다. type이 다르면 false
	!주의: java와 달리 ==연산자와 ===연산자가 reference비교가 아닌 value비교를 한다. 그래서 '문자열'=='문자열'같은 비교가 가능해진다.
		레퍼런스 비교하고 싶으면요? 객체를 명시적으로 생성하면(new String()등) object타입이 되면서 reference비교를 하게 된다.

js 내장함수
	parseInt();
	prompt(); 사용자가 브라우저에서 값을 입력하게 유도하여 얻어 올 수 있음.

function() 
	자바의 메소드와 같은 역할~
	선언하고 함수명으로 호출함
	전방참조 후방참조 다 됨(static method같은 면이 있어서 페이지를 불러 올 때 이미 읽어들이고 시작하거덩)
	인자를 받는다고 해놓고 안 받아도 된다. 왜?? 안받으면 undefined 해버리면 되니까~
	그래서 펑션은 오버로드 안 됨, 인자 수 나 타입으로 분간이 안되니까. 안 받는다 해놓고 받아도 무방
	
	arguments : 펑션을 선언하고 arguments를 적고, 펑션에 인자를 주어서 호출하면 arguments가 배열식으로 받아먹는다.

	anonymous fuction : 형식=> (function (인자){실행문}) 요렇게 쓴다. var은 fuction도 받을 수 있다~ function 타입으로 받는다.
			또한 시작할 때 불러들이지 않고 var에 넣어놓을 뿐이다. 그러므로 anonymous fuction은 전방참조만 되고 후방참조는 되지 않는다.
	callback콜백함수 : 함수내부에서 다른 함수를 부르는 함수~ js의 꽃~ 

for in문
	for(var idx in arr){
		console.log(arr[idx]);
	}
	arr의 length만큼 반복


*웹 상에서 에러 확인하려면 브라우저의 개발자도구를 이용하자
*주석 정리
	자바 : //(한줄주석), /**/(여러줄 주석)
	js : 위와 동
	css : /**/(여러줄 주석)
	sql : --(한줄), /**/(여러줄)
	html : <!-- --> (여러줄)