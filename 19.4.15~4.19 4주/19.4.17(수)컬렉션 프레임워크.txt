19.4.17(수)
java collection framework는 객체관리용 외부 라이브러리 같은거였는데.. 업데이트 중에 java에 통합되었다.
오늘자 내용의 클래스는 전부 java.util.하위 클래스이다
collection framework(자료구조의 도구)
	LinkedList와 ArrayList의 차이 : 모든 List배열은 각 칸마다 객체를 하나씩 만들고, 각 객체는 자기인덱스+1에 있는 것의 주소를 가지고 있다.
			그래서 추가 할때는 하나의 객체를 만들고 전에 있는 객체에 자기의 주소를 넣어준다. 만약 배열의 x번째 객체가
			다음 객체의 주소가 없다면(null) 배열의 마지막 번째라는 것이다.
			일반배열(ArrayList와 마찬가지)을 동적할당 할 때와의 차이점을 생각해보자.
			일반배열을 늘리고 싶으면 한칸늘린 배열을 선언하고 기존배열을 전부 복사해 넣는 식으로 이뤄지는데,
			List배열은 객체 하나 추가하고 주소값을 앞객체에 넣을 뿐이다.
			추가가 많아지는 상황이라면 List배열이 유리하다는 것을 쉽게 이해할 수 있다.
			하지만 배열의 내용을 읽어들이는 상황이라면 달라진다.
			일반배열은 해당 index로 이동해서 그 자리의 주소값을 불러들이면 끝이지만
			List배열은 n번째 index로 이동하기 위해선 n-1에 적혀있는 주소값, 그걸 위해 n-2에 적혀있는 주소값... 1이 될 때까지
			불러들여야 되는 것이다. 상황에 맞게 사용하면 되겠다.
			결국 수정,입력,삭제 가 많은상황 = > LinkedList
			내용을 출력, 볼일이 많은상황 = >ArrayList 
			(이론상)
			걍 ArrayList 쓰삼 ^^;

	ArrayList
		java.util.ArrayList 클래스.
		생성자
		ArrayList(Collection arr); arr 복사
		ArrayList(int i) 몇칸짜리로 만들지 미리 설정. 사이즈가 정해져 있을경우 해주면 좋다.
		주요 메소드
		add(Object obj); 배열을 한칸 늘리고 그 칸에 (내용) 추가
		add(index i, Object obj); index i 에 obj껴넣기
		set(index i, Object obj) 바꿔치기
		size(); 배열의 크기 int리턴
		get(int idx); 배열 idx번째 것 object리턴
		remove(index i) index번째 것 삭제, 해당 index가 없다면 i에 있는것을 찾아서 삭제..만약 객체를 넣었다면 해당 객체의 주소가 동일한것 삭제
		removeAll(collection e) collection e에 있는 내용물과 동일한 것들 삭제 (clear아님 주의)
		toArray() Object array로 바꿔줌 obj[]리턴
		indexOf(Object obj) obj인덱스 int로 리턴
		isEmpty() 내용 없으면 true 있으면 false  / boolean 리턴 ,remove만으로는 empty가 안될때도 있다.
		clear() 싹 비워준다 empty로 만들어줌.
		clone() 객체의 reference를 복사
	ArrayList의 값 활용.
		get(int idx)로 불러낸 후 해당 타입이 Object이므로 (String), (int)등으로 강제형변환 필요.
		그런데 기본타입들은 객체가 아닌데 어떻게 강제형변환이 이루어지죠? 랩퍼클래스로 오토박싱 언박싱 참조.
	
	LinkedList
		메소드
		ArrayList와 유사.
		하지만 다른 자료구조에서 사용할 수 있는 메소드 들이 더 있음.
			Queue와 Stack	
				Stack 후입선출 Queue 선입선출
			Queue 이미지화
					---------------
				투입=>    |3||2||1|	=>산출 ,|2|를 보고싶으면 먼저 |1|을 봐야한다.
					---------------
				주요 메소드
				offer(Element e) e를 추가.
				offerFirst(E e) e를 맨앞에 추가
				offerLast(E e) e를 맨뒤에 추가
				poll() 내용 산출. 반드시 추가된 순서대로 나온다.
				peek() 다음에 나올 값 미리보기. 없으면 null

			Stack 이미지화 - 스택영역을 생각하자
				주요 메소드
				push(Object obj) obj를 추가
				pop() 내용산출 마지막으로 추가한 내용이 나옴
				peek() 다음에 나올값 미리보기. 없으면 error
				search(Object obj) obj가 몇번째로 나올지 찾아줌
			Deque => jdk 1.6 때 추가 / Queue Stack를 합친거 처럼 쓴다. 맨앞꺼,맨뒷꺼 출력. List들과의 차이점은 얘는 가운데 있는건 못뽑아쓰잖아.
				주요메소드
				offerFirst(Object obj) obj를 추가
				pollLast(),pollFirst() 마지막거(맨처음추가한것), 처음거(가장 나중에 추가한 것) 산출
			Queue Stack Deque 는 LinkedList에 기능이 통합되어있다. (API에서 찾아보면 이들을 interface로 받고있음)

vector 1.0부터 있던 자료구조. 현재 다른 collection들이 짱짱한 상태에서 쓸 일은 없겠지만, 라이브러리나 예전 코드들은 여전히 vector를 사용하고 있기 때문에
	알아둬야 한다.
	주요 메소드
		요즘 컬렉션들은 용법이 거의 통일돼있기때문에 add, get, size등 비슷하다.
		따로 알아둬야 할 것들은
		addElement(E e) = add와 같음
		insertElementAt(E e , index i ) = add(E e, index i)와 같음
		setElementAt(E e, int i) = set과 같음
		removeElementAt(index i) = remove(index i)와 같음
		removeAllElements() = clear와 같음
		size가 없던시절 size를 대체하기위해
		java.util.Enumeration 를 활용 Enumeration enu = vector객체를 만들어
		enu.hasMoreElements()가 false가 나올때까지 돌려봄으로써 확인
		
interface set -집합의 개념 . . .중복값을 없앰
	set을  구현해주는 클래스
		HashSet - 중복없이 쌓음, 객체의 경우 해쉬코드 주소를 보고 결정 - 해시함수 사용
		TreeSet - 중복없이 쌓아서 오름차순 정렬함 - 이진탐색트리 사용
		정렬의 필요성이 없을 때에는 HashSet을 이용하는게 좋다. TreeSet은 별도 설정이 없다면
		객체를 받았을때 error를 내기 때문이다.
	set을 도와주는 클래스 Iterator
		Iterator ite = set.iterator();
		Iterator 의 메소드
			next() 다음것
			hasNext() 다음것이 있는지없는지 boolean
			반복문 =while(ite.hasNext()){
				 System.out.println(ite.next();)} 
시간 측정 - 
	January 1, 1970 기준으로 얼마나 흘렀는지=> System.currentTimeMillis();