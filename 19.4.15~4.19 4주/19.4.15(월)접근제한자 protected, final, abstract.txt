19.4.15(월) 
다중상속은 불가, 상속받는 클래스가 없다면 Object클래스를 상속받게됨
접근제한자 protected= private < default < protected(상속에서만) < public
	protected는 상속이 없으면 default와 다를 바 없다.
	
	예시 - Ex02의 생성자는 protected 상태임. Ex02의 func01 호출 시도
	public class Ex01 extends com.bit.pm2.Ex02 {
		public static void main(String[] args) {
			Ex01 me = new Ex01();. . .가능!
			me.func01(); 
			com.bit.pm2.Ex02 you = new com.bit.pm2.Ex02(); . . . 불가능!
			you.func01(); 에러.
		}
	}	
	
	static 의 경우 클래스이름으로 접근하기 때문에 위의 경우 com.bit.pm02.func01을 실행했으면 실행가능.
	그러나 static 메소드,필드를 상속받아서만 접근해야할 이유가 없기때문에 뻘짓이다

	protected class 를 생각해보자. 가능할까? 생각해보면 default랑 차이가 전혀 없다.
	class에는 protected를 붙일 수 없다.

final 명령어.
	final을 붙여서 변수를 상수처럼 쓸 수 있다. 메모리 공간으로 생각해보면 class 옆에 constant 영역에 저장.
	필드에 정의할 경우 생성자를 통해 초기화 하든지 집적 하든지.

	메소드에 붙인다면 자손 메소드 들 상대로 오버라이딩을 못하게 할 수 있다.(기능을 바꾸지 못하도록)

	클래스에 붙인다면 더이상 상속을 허용하지않는 종단 클래스가 된다. api문서를 찾아보면 대부분의 클래스들이
	final이 붙어있단걸 알 수 있다.

	파라미터로 받는 final은? 그냥 쓰면 된다.

	생성자는 ? final 붙여봤자다. 어차피 한번 객체를 만들고 안 쓰는데. 해보면 안된다는걸 알 수 있다.

추상메소드 - 메소드의 선언만있고 구현이 없는 것.
	추상메소드에는 접근제한자와 반환타입 사이에 abstract 를 넣어줘야 하고 추상 메소드가 있는 클래스는
	abstract를 붙여줘야한다. (추상메소드가 없어도 추상클래스가 될 수 있긴 하다)

	상속받은 클래스가 추상클래스라면 추상메소드를 구현하든지 자식 클래스도 abstract를 달아야 한다

	추상메소드 같은거 왜 써??? 나중에 무조건 하라고...
	API문서 랩퍼클래스들은 추상클래스인 java.lang.number의 sub클래스들이다. 추상클래스 의 예를 보고싶다면
	java.lang.number를 보자

	추상 클래스는 객체를 생성하지 못한다.

인터페이스
	인터페이스의 명명규칙은 클래스와 같다.
	추상메소드 선언만 가능한 반쪽짜리 클래스. 인터페이스는 추상메소드밖에 가지지 않기 때문에 메소드생성시
	abstract를 생략해도 추상메소드로 생성된다.
	interface 의 접근제한자는 public이 default이다.
	interface끼리 상속할 수 도 있다. class입장에선 implement된 interface의 상속자도 오버라이딩 해줘야 한다.
	생성자도 없다보니 interface끼리는 다중상속도 가능하다. 동일한 메소드명이 있어도 상관없다. 어차피 구현이 안되있기때문에.
	마치 필드처럼 변수 선언도 할 수 있지만 그 변수를 조정할 수 없다(public final인것처럼 취급)
	
	인터페이스의 용도는 딱 정해진게 없다. 다중상속와 유사한 효과를 노리기위해 사용할 수 도 있고, 팀 작업에서
	메소드의 이름과 규칙을 지시하는 용도로 사용할 수 도 있다. 하다못해 내용물 하나도 없고 클래스 주석 목적으로
	이름만 짓는 경우도 있다.  맘대로 쓰삼

import문
	사전작업~환경설정 같은 느낌 동일패키지에 없는 메소드나 필드를 호출할 때 패키지명을 생략하게 해주는 용도.
	심지어 같은 패키지안에 동일한 클래스명이 있어도 import문에 우선권이 간다. import끼리의 우선권은 *(wild)로 생략한 것 보다
	명시해준게 우선이다.
import static문
	static으로 선언된 것만 가져올 수 있다.
	