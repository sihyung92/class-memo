19.4.18(목)
제네릭 generic
jdk1.5부터 등장

generic의 필요성
	클래스에서 사용하는 타입들을 Object로 해야 할 때 다른 클래스와의 호환이 귀찮아지는 문제.
	(원하는 타입으로 강제형변환downcasting 해서 써야함)
	다형성을 통해 일부 해결 했지만 상속을 받지 않으면 적용할 수 없었고
	그 문제를 해결하기위해 generic 도입
generic의 선언
	클래스 이름뒤에 <T>
generic의 초기화
	객체를 생성할때 객체이름<넣으려는 타입> = new 객체이름<넣으려는 타입>();
	1.7부터는 뒷<>을 비워두어도 자동으로 맞춰준다.
	상위타입을 넣으면 하위타입(상속받는)들도 받아준다 

지맘대로 쓰는거지만 너무 지맘대로 쓰는경우
	<T extends xxx>로 제약할 수 있다. 실수 정수만 허용하고 싶을때는 T extends Number 을 한다던지.
	<T super >는 선언할 때 하는게 아니라 객체 생성시점에 하는거임.
안써도 무방하다. 다운캐스팅 하면되니까. 하지만 손을 한번 줄여주니까 잘 활용해보자
*generic은 기본primitive타입들을 쓸수 없음. 랩퍼클래스를 활용하자
*<?>는 객체생성시점에 결정하지 못한 것 나중에 설정해줘야 한다.
*<a,b>식으로 두개이상의 제너릭을 사용할 수도 있지만, 순서를 지켜야 한다는 것에 유의
디자인패턴
	잘 된 코딩방식들이 가지고있는 공통된 방법론을 묶어 모아놓은것.
	팩토리패턴 - ...^^;