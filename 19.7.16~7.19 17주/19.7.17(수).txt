19.7.17(수)
오늘 학습 목표
1. listener & filter & servlet에 대해
	listner와 servlet은 스프링에서 ,filter는 struts에서 사용

2. logging framework
	사용 툴 : log4j

3. struts2
--------------------------------

1-1. listener => javax.servlet.ServletContextListener를 인터페이스로 받아
	contextDestroyed 메소드와 contextInitialized 메소드를 오버라이딩.
	web.xml파일에서 <listener>태그의 하위태그로 <listener-class>를 만들고 내가 만든 리스너 클래스를
	입력하여 사용
	contextInitialized 는 서버를 시작할 때 실행
	contextDestroyed 는 서버를 (정상)종료할 때 실행
	*annotation 으로 리스너 등록 : 리스너 클래스에 @WebListener 만 import받고 적어주면 된다.
* web.xml 태그 =>
  <context-param>
  	<param-name>cmsg</param-name>
  	<param-value>12345</param-value>
  </context-param>
	를 통해 모든 서블릿에 파라미터를 줄 수 있다. 해당 파라미터를 받기 위해선 서블릿클래스의 Do메소드에서
	getServletContext().getInitParameter("파라미터 name") 을 통해 받을 수 있다.
* annotation, @WebServlet() => 서블릿맵핑과 init param 부여
  @WebServlet(value="url패턴", initParams= {
		@WebInitParam(name="이름", value ="벨류")
  })); 
1-2. filter => javax.servlet.Filter를 인터페이스로 받아 사용한다.
	destory와 init메소드는 서버가 시작될 때 작동한다.(listener에 우선순위가 있음 ; init은 리스너가 먼저, dest는 리스너가 나중)
	doFilter는 web.xml에 <filter>태그로 등록하고 <filter-mapping>을 통해 사용한다. 
	doFilter에는 request와 response말고도 세번째 인자로 FilterChain chain을 받는다. 
	chain.doFilter(req객체,resp객체) 메소드를 통해 다음필터를 작동 시킬 수 있다.
	chaining 순서 : filter mapping 순으로 진행. 더이상 필터가 없다면 서블릿 맵핑으로.
		서블릿 구동이 끝나면 역순으로 필터처리가 된다
	필터태그에 <init-param>태그로 파라미터 주는 방법 : 서블릿과 달리 필터에는 getInitParameter() 메소드가 구현되어 있지 않다.
	ContextParameter라면 request객체에서 getServletContext().getInitParameter()를 통해 받아오겠지만 필터 태그에 삽입한 파라미터를
	받아오고 싶다면 init() 메소드에서 인자로 주는 filterConfig 객체에서 getInitParameter()를 통해 값을 받고 해당 값을 필드 변수에 담아 놔서
	활용하자.
	* 필터가 서블릿역할을 대체할 수도 있다. doFilter() 에서 request와 response 객체도 받기때문에 서블릿에서 하는 퍼포먼스를 흉내내서 서블릿 없이
	 작동가능. struts가 이런 식으로 동작한다.
	*annotation 방식 : 필터 클래스 위에 @WebFilter("url") [value="url", initParams={@webInitParam(name="name" value="value")}]

1-3. servlet url패턴 wild방식 
	/ => 모든 url
	*.확장자 => 어떠한 확장자를 가진 모든 url
	!주의 : filter에서는 안 됨 filter에서의 wild는 "/*" 을 통해 활용.(반대로 servlet에서 /*를 쓰면 무한루프 돈다)

2-1. http://logging.apache.org/ 하위의 Log4j. 2버전이 있지만 범용성을 위해 1버전을 많이 사용한다. log4j 페이지 메뉴에서 legacy -> 1.2, 다운로드 까지 진행
	다운받은 폴더의 하위에서 jar파일을 내 프로젝트 lib에 삽입해준다.
	documentation -> introduction 에 활용예제가 나와있다.

	컨트롤러 혹은 필터에서 	static Logger logger = Logger.getLogger(MainController.class);
	로 선언해주고 로거의 데이터가 출력되기를 원하는 곳에 BasicConfigurator.configure(); (생성자에 하면 좋을듯 ; 내 아이디어)
	logger.info("Entering application"); 식으로 하면 된다. 사용할 수 있는 방식 trace, debug, info, warn, error, fatal이 있다.
	src 하위에 file로 log4j.properties 파일을 만들고
		# Set root logger level to DEBUG and its only appender to A1.
		log4j.rootLogger=DEBUG, A1
		# A1 is set to be a ConsoleAppender.
		log4j.appender.A1=org.apache.log4j.ConsoleAppender
		# A1 uses PatternLayout.
		log4j.appender.A1.layout=org.apache.log4j.PatternLayout
		log4j.appender.A1.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n
	입력. 가장 아랫줄의 패턴을 바꿔줌으로서 출력문의 형식을 정할 수 있다. 패턴의 형식은 https://hongkyu.tistory.com/76 참조 혹은 log4j pattern options 검색
	!만약 properties 파일을 안 만들어주고 사용하고 싶으면
	BasicConfigurator.configure();를 선언해주어야 한다.
	위의 옵션은 ConsoleAppender을 쓰고 있기때문에 콘솔에 출력이 된다.
	logger를 통해 출력해볼 수 있는 메세지는 trace > debug > info > warn > error > fatal 6개의 레벨이 있다.
	properties 파일에서 레벨을 fatal로 해주면 fatal()만 기능, error로 해주면 error()과 fatal() 만 기능,
	warn()로 해두면 warn(), error(), fatal()만 기능.. 이런 식임
	properties파일에서 레벨을 설정하는 부분은 log4j.rootLogger=(레벨), A1 <<이부분과
	원하는 패키지마다 개별적으로 지정해주고 싶다면 log4j.logger.원하는 패키지 경로 <<이렇게 추가로 입력해주면 된다.

3. struts
	다이나믹 웹 프로젝트 만들때 web.xml 자동으로 만들어주는 탭에서 webContent 폴더 이름 변경해서 생성 가능
	2.5버전과 달리 2.3버전에선 org.apache.struts2.dispatcher.ng.filter 에 클래스가 있다.
	<struts> 하위태그인 <package>태그 속성 : name= 이름 , namespace= 경로 : 경로를 추가해 주는 속성

	struts 는 controller의 역할을 action 태그가 수행한다. <action>의 속성 : name=이름, class="실행할 자바파일 경로"
	그중 class는 com.opensymphony.xwork2.Action 를 상속받은 클래스가 하는데, action 인터페이스는 execute()추상메소드를 가지고 있다.
	해당 메소드에서는 String 을 반환하는데, 이 반환하는 String은 struts.xml에서 view 역할을 하는 result 태그들 중 어떤 태그로 갈지 지정하는 역할을 한다.
	action 인터페이스가 success, none, error, input, login의 값을 필드로 가지고 있으므로 this.success <= 이렇게 반환해도 된다.

	action 하위 태그
	<result>태그의 속성 : name을 가지는데 success, none, error, input, login 중 하나를 가질 수 있다. (default = success) 뷰 역할을 하므로 거의 필수겠지
				type="redirect" 하면 value인 url로 리다이렉트 시킴, redirectAction이면 해당 action이름을 실행시킨다.(동일 패키지만)
				태그의 value를 <param>태그를 주면 파라미터를 줄 수 있다. <param name="이름">벨류</param>. param태그를 썼으면 view페이지 주소도
				<param name="actionName">주소</param> 이렇게 줘야 한다.
				
	<interceptor-ref name="params"></interceptor-ref> : getter setter 역할을 해줌. form에서 건너오는 것 중 컨트롤러에 setter로 정의되어있는 것들은
		다 넣어주고 getter로 되어있는 것들을 attribute에 넣어준다
	<interceptor-ref name="modelDriven"></interceptor-ref> 들어와서 있는 객체 안의 setter에게 값을 넣어줌 사용하려면 ModelDriven 인터페이스를 상속해야 한다.
		ModelDriven에서 getModel()메소드에서 return값을 원하는 객체를 하면 됨. 해당 인터페이스의 제네릭은 리턴하려는 객체이면 된다.
		!주의 : 해당 인터페이스를 상속받은 클래스는 반환하고자 하는 객체를 미리 만들어놔야 한다. 안 그럼 에러. 그리고 이 interceptor는
		struts 맵핑에서 interceptor 중 가장 위에 있어야 한다. 그런데 필드에 미리 객체를 생성해 놓는 것은 메모리관리상 안 좋은 패턴이고, 그렇다고 생성자에
		정의해놓자니 struts는 싱글톤 패턴이라 버그가 나기 좋다. 그래서 Preparable인터페이스를 상속받고 prepare()안에서 객체를 찍고
		<interceptor-ref name="prepare"></interceptor-ref> 필터를 modelDriven필터보다 상위에 해놓고 써야 한다.
	* struts는 context path 까지 root로 본다.

! struts 의 약점 : session객체를 이용할 수 없고 http접근 시 method(get,post)를 구분할 수 없다.