19.5.29(수)
웹표준을 알기 위해서는 웹부터 알아야겠죠..
1교시 대충 웹의 역사, 웹의 통신규약과 웹에서 정보를 주고받기 위한 언어인 HTML소개
2교시 (병원갔다왔음)웹표준을 결정하는 단체 w3c (World Wide Web Consortium)
3교시 하지만 현재 웹표준 중 하나인 html5는 w3c가 아니라 브라우저 사社 끼리 으쌰으쌰해서 웹표준으로 채택함

html5 학습용 프로그램 http://brackets.io/ (adobe꺼)
기타 에디터 프로그램 Sublime Text, Atom(github社꺼라 깃헙과 연동 좋음), Visual Studio Code(MS꺼)

brackets 사용법. . . 화면 오른쪽 번개버튼을 누르면 크롬에서 미리보기를 지원한다.

HTML5
	기본레이아웃 중 하나(semantic tag):
		-----------------
		│     header	│
		-----------------
		│      nav	│
		-----------------	
		│ section  │asi │
		-----------     -
		│ article  │de	│
		-----------------
		│     footer	│
		-----------------	
		header = 페이지 상단(head와 다르다)
		nav = 내비게이터 (어느 페이지로 갈지 지시)
		section = 내용부분
		article = 본 내용은 아니지만 내용과 연관
		aside = 내용과 관련없는 부분(광고라든지)
		footer = 발^^
		*section과 article의 구분은 애매모호하여 지맘대로들 쓴다. 그리고 article이 section의 일부라는 말이 많지만 별개의 요소라는 것을 기억하자
		*HTML5이 나오기 전에는 article이 aside역할도 겸했었기 때문에 그 관성으로 현재 article의 역할이 애매해진 측면도 있다.
		--이상의 태그들은 굳이 사용하지 않더라도 출력이 달라지지는 않는다. 하지만 내용들에 의미를 부여하므로(그래서 sementic web에서 활용할 수 있게 되므로)
		 지켜주는 게 여러모로 도움이 된다. 하지만 css를 들어가보면 div로 짜르는게 너무~편해서 잘 안 지켜지는 경우가 많다
	*HTML5의 학습은 https://www.w3schools.com/html/default.asp을 이용하자 
	HTML 에서 meta태그를 제외한 모든 태그는 열면 닫아야 한다. 무 조 건
	웹표준 캐릭터셋=utf-8
	*HTML과의 차이점 => 의미없는 것들은 빠지고(CSS나 SCRIPT에서 처리할) 의미가 있는 것들은 살아남았다
	*빠진 태그, HTML의 역사 = https://www.w3schools.com/html/html5_intro.asp
	*<b><i><table(진짜 표를 만들때 제외)> 죽음
	*추가된 태그, 속성들 = https://www.w3schools.com/html/html5_new_elements.asp
	body
		<h>제목이 들어간다. 제목들은 숫자에 따라 상하관계를 가지게 된다.
		 h1으로 대제목을 시작했다면 중제목은 h2로 가야한다. 소제목은 h3(2라면 3,4)</h> 내용은<p>
		<br/>개행 열고 닫기(html에선 닫아줄 필요가 없었지만 5에선 다르다)
		<ol></ol>,<ul></ul> ol은 숫자로 나열, ul은 기호로 나열, 엘리먼트는 <li></li>로 추가
		<table></table>하면 브라우저에서 자동으로 스키마부분은 <thead>태그를, 내용부분엔 <tbody> 태그를 추가한다.
			방식1처럼 화면을 table로 쪼개기 하려 하지 말자
		중요!<div>블록태그. 이 안에 들어오는 것들은 의미상 그룹이 지어진다. div의 이름(id)은 유일하므로 중복되어선 안 된다. 하지만 class로 부여한다면 중복이 가능하다.</div>
		<span>얘도 블록태그지만 div와 달리 개행이 안됨. css에서 제어할 수 있으니 상관은 없는디<span>
	*간혹 <html lang="ko">식으로 태그설정을 줄 때가 있는데 현재는 그럴 필요가 없다.

Semantic Web(시맨틱 웹) 의미론적인 웹, 현재의 인터넷과 같은 분산환경에서 리소스(웹 문서, 각종 화일, 서비스 등)에 대한 정보와 자원 사이의 관계-의미
	정보(Semanteme)를 기계(컴퓨터)가 처리할 수 있는 온톨로지(존재론, 컴퓨터공학에서는 컴퓨터가 다룰 수 있는 개념으로 표현한 모델) 형태로 
	표현하고, 이를 자동화된 기계(컴퓨터)가 처리하도록 하는 프레임워크이자 기술이다. 시맨틱 웹은 XML에 기반한 시맨틱 마크업 언어를 기반으로 한다.
	가장 단순화 된 형식인 RDF는 RDF는 <Subject, Predicate, Object>(주체, 개성, 속성)의 트리플 형태를 지니고 있다. 
	검색엔진등에서 검색에 활용하는 알고리즘과 관계되는데, (인공지능에서의 연구가 더 활발하겠지만 우리와 당장은 인연이 없겠지) 웹사이트를 구현할 때
	semantic을 구현한 검색엔진은 section위주로 검색하게 되겠지.
	*semantic 튜토리얼 = https://www.w3schools.com/html/html5_semantic_elements.asp

웹표준에서 화면의 표현은 css를 거쳐가도록 되어있다. 그러므로 이제 html5문의 출력이 마음에 안들어도 넘어가고 css에서 처리하자.

css
	html문에서 <style type="text/css">여기는 css의 영역~</style>
	css의 주석은 /*여기*/ 오류의 위험때문에 잘 안쓰기도 함
	작성예시) Selector(선택자) Declaration
		   h1       {color:blue;   font-size:12px;}
		 	   property value   property   value

		  =>선택자{속성:값;속성:값;속성:값;...}

	css입력 방식은 크게 3가지가 있다.
		태그에 집적 style을 지정하는 in-line방식
		헤드에서 스타일을 지정하는 내장방식
		css파일을 따로 만들어 삽입하는 외부파일방식

	선택자의 종류 :
		우선적용순위는 inline>id선택자>class선택자>태그선택자이다. 그러므로 inline질 하면 css문 짜는 디자이너한테 뒤지게 혼나는 수가 있다(외부파일속성이 무시될것이므로)
		*선택자뒤에 [속성=값]을 붙여서 조건을 줄 수도 있다.
			^= 는 값으로 시작하는 모든것
			$= 는 값으로 끝나는 모든것
			*= 는 값이 포함된 모든것
		태그선택자 = 선택자에 태그명을 적으면 해당 모든 태그에 적용된다. 선택자 앞에 아무것도 안 적으면 태그지시자이다
		ID선택자 = 해당 ID를 사용한 태그만 적용된다. 선택자 앞에 #을 붙여서 선언한다. 
			*ID는 한번만 쓸 수 있다는걸 명심하자
			요소#ID
		class선택자 = 해당 class를 사용한 태그들에 적용된다. 선택자 앞에 . 을 붙여서 선언한다. 
			요소.class
		의사 선택자 = 해당 파일 전역에 조건에 맞춰 일괄 적용할 수 있는 선택자.
				(선택자들은 2개뿐만 아니라 그 이상도 가능하다)
				1. 요소1~요소2{} - 요소1 의 자식요소 들 중 다음에 등장하는 요소2들(형제요소)
				2. 요소1+요소2{} - 요소1 의 자식요소 들 중 다음에 등장하는 첫번째 요소2
				3. 요소1>요소2{} - 요소1자식요소로 있는 요소2들(자식만 가능)
				 * 요소1 요소2{} - 이것도 2번과 비슷하지만 자손들도 다 가능
				4. 요소1,요소2{} - 요소1과 요소2, 다중선택. 3개이상도 가능
		유사클래스 = 특정 자식을 찾는 클래스,
				1.요소1:nth-child(n) n번째 자식 요소1을 참조한다. 2n등으로 배수 들도 찾을 수 있다.
				2.요소1:fisrt-child, 요소1:last-child 1번째, 마지막 자식인 요소1을 참조한다	
				3. :not(요소1) ~~중에 요소1 아닌것들
		*형제요소란 같은 부모를 두고 있는 요소들을 말한다. <h>태그에 딸린 <p>태그들은 서로 형제이다. <div>해버리는 순간 다른 그룹으로 묶이므로 형제관계가 사라지겠지?

		<a>태그 관련 => a:link ,:visited, :active, :hover
			기본적으로 a태그는 black에 누르면 보라색으로 변하는데, css설정을 통해 보정할 수 있다. a{}전체로 설정을 주면 어떠한 경우에도 그 색이 유지되며,
			a:link를 통해 누르기 전, a:visited는 누른 후, active는 누를 때, hover는 마우스가 그 위를 지나갈 때 각각 설정을 줄 수 있다.
			:hover는 다른 태그들에서도 쓸 수 있다. 
*css template 무료 파일이 많이 풀려있다. 자신없으면 긁어와 그냥